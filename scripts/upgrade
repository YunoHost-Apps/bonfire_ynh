#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STOP SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Stopping systemd services..."

ynh_systemd_action --service_name=$app --action="stop" --log_path="systemd"
ynh_systemd_action --service_name="meilisearch-$app" --action="stop" --log_path="systemd"

#=================================================
# UPDATE BONFIRE RELEASE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Downloading new Bonfire release..." --weight=10

	# Download and extract new pre-built release
	ynh_setup_source --dest_dir="$install_dir" --full_replace=1 --keep=".env"

	# The tarball extracts to a "bonfire" subdirectory, move contents up one level
	if [ -d "$install_dir/bonfire" ]; then
	    # Move all files from bonfire/ to parent, preserving .env
	    mv "$install_dir/bonfire/"* "$install_dir/" 2>/dev/null || true
	    mv "$install_dir/bonfire/".* "$install_dir/" 2>/dev/null || true
	    rmdir "$install_dir/bonfire"
	fi

	# Update Meilisearch if needed
	arch=$(uname -m)
	if [ "$arch" = "x86_64" ]; then
	    meili_arch="amd64"
	elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
	    meili_arch="aarch64"
	else
	    ynh_die --message="Unsupported architecture: $arch"
	fi

	meili_version="v1.14.0"
	curl -L "https://github.com/meilisearch/meilisearch/releases/download/$meili_version/meilisearch-linux-$meili_arch" -o "$install_dir/meilisearch"
	chmod +x "$install_dir/meilisearch"
fi

# Ensure directories exist
mkdir -p "$data_dir/uploads"
mkdir -p "$data_dir/meilisearch"
chown -R $app:www-data "$install_dir"
chown -R $app:www-data "$data_dir"

#=================================================
# UPDATE A CONFIGURATION
#=================================================
ynh_script_progression --message="Updating a configuration file..."

# Extract existing secrets from current .env file
if [ -f "$install_dir/.env" ]; then
	secret_key_base=$(grep "^SECRET_KEY_BASE=" "$install_dir/.env" | cut -d= -f2)
	signing_salt=$(grep "^SIGNING_SALT=" "$install_dir/.env" | cut -d= -f2)
	encryption_salt=$(grep "^ENCRYPTION_SALT=" "$install_dir/.env" | cut -d= -f2)
fi

ynh_add_config --template="../conf/.env" --destination="$install_dir/.env"
ynh_store_file_checksum --file="$install_dir/.env"

chmod 400 "$install_dir/.env"
chown $app:$app "$install_dir/.env"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# Create Meilisearch service (if not exists)
ynh_add_systemd_config --service="meilisearch-$app" --template="meilisearch.service"

# Create/update Bonfire service
ynh_add_systemd_config

ynh_add_nginx_config

ynh_use_logrotate --non-append

#=================================================
# START SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Starting systemd services..." --weight=1

# Start Meilisearch first
ynh_systemd_action --service_name="meilisearch-$app" --action="start" --log_path="/var/log/$app/meilisearch.log"

# Start Bonfire (migrations run automatically on startup)
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log" --line_match="Running Bonfire.Web.Endpoint" --timeout=300

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
