#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

# Download deps install script
ynh_setup_source --source_id=deps_install --dest_dir="$install_dir"

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir"

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R o-rwx "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R $app:www-data "$install_dir"
chmod +x "$install_dir/deps-debian.sh"
ls -la "$install_dir"

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression "Installing dependencies..."

ynh_hide_warnings "HOME=$install_dir $install_dir/deps-debian.sh"

# ynh_nodejs_install
#

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression "Configuring NGINX web server..."

# Create a dedicated NGINX config
ynh_config_add_nginx

#=================================================
# ADD A CONFIGURATION
#=================================================
## Generate secrets and other config values
secret_key_base=$(ynh_string_random --length=50)
signing_salt=$(ynh_string_random --length=50)
encryption_salt=$(ynh_string_random --length=50)
# search
meili_master_key=$(ynh_string_random --length=50)
# max file upload size
MEDIA_UPLOAD_SIZE="${media_upload_size//[!0-9]/}000000"

ynh_script_progression "Adding $app's configuration..."

ynh_config_add --template=".env" --destination="$install_dir/.env"
ynh_store_file_checksum "$install_dir/.env"

#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 400 "$install_dir/.env"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown $app:$app "$install_dir/.env"
#=================================================
# SPECIFIC SETUP
#=================================================

# load .env into env
export $(grep -v '^#' $install_dir/.env | xargs -d '\n')
# source $install_dir/.env
export WITH_DOCKER=no # or source .env ? # Using this for now
export TERM=linux # why is that not defined ?
export TERMINFO=/etc/terminfo
export PATH="$PATH:$install_dir/.local/share/mise/shims"

ynh_script_progression "Preparing Bonfire release..."
cd $install_dir
#ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc "mise plugin add erlang https://github.com/asdf-vm/asdf-erlang.git" # add erlang as source
#ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc "mise install" # install Elixir
# ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc node_load_PATH mix local.hex --force" # install Hex in non-interractive way
### DONT USE GLOBAL NPM INSTALL
# ynh_replace --match="npm install --global" --replace="npm install" --file="$install_dir/justfile"

#=================================================
# Building  the release
#=================================================
# ynh_script_progression "Building Bonfire release... (this will take a long time)"
# ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc "WITH_DOCKER=no node_load_PATH just config-basic"
#ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc "WITH_DOCKER=no node_load_PATH just mix bonfire.deps.update"
# ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc "WITH_DOCKER=no node_load_PATH just rel-build"

#=================================================
# CREATE ADMIN USER
#=================================================
# ynh_script_progression "Creating admin user account..."
# ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc "$install_dir/bin/bonfire eval 'Bonfire.Me.make_account_and_user(\"$admin\", \"$(ynh_user_get_info --username=\"$admin\" --key=mail)\", \"$password\")'"

#=================================================
# START SYSTEMD SERVICE - Run the release
#=================================================
release_folder=$install_dir

### Not running the migration, they are done on startup anyway
#ynh_script_progression "Running database migrations..."
## Database created before, let's run the migrations
#ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc  "WITH_DOCKER=no just cmd $release_folder/bin/bonfire eval 'EctoSparkles.Migrator.migrate()'"

#ynh_script_progression "Starting Bonfire..."
#ynh_hide_warnings ynh_exec_as_app -s $SHELL -lc  "WITH_DOCKER=no just cmd $release_folder/bin/bonfire start"

mkdir -p "/var/log/$app"
#REMOVEME? Assuming ynh_config_add_logrotate is called, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R $app:$app "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

# Create a dedicated systemd config
ynh_config_add_systemd

yunohost service add $app --description="Bonfire daemon" --log="/var/log/$app/$app.log"

ynh_script_progression "Starting Bonfire daemon service..."

# Start a systemd service
ynh_systemctl --service=$app --action="start"  --wait_until="[info] Running Bonfire.Web.Endpoint"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
ynh_script_progression "Now you need to sign-up, the first account will automatically be admin."
